Regarding test:- CH 1,3,5 from book.

Imperative languages are abstractions of von neumann architecture.
  * Memory
  * Processor


score,err:= strconv.ParseFloat(intput,64)
if err!= nil{
 log.Fatal(err)
}
var status  string 
if score>=70{
  STATUS = "pass"
  }else{
    status="fail"}
fmy.Print(status)


*Symanttic and sytax gikabg

cd .. root //root directory
pwd //working command
cd ~ //Home directory
cd go
cd ../..
vim .vimrc

primes := []int {2,3,4,5,6}
thing := primes[1:3]
#from 1 it starts and upto 3
fmt.Println(thing)
primes.append(13) //append to the end

Assignemnt 8:
Each entry is gnna be string
